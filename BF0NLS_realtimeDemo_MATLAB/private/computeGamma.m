function [Gamma1, Gamma2] = computeGamma(L, F, pitchBounds, crossCorrelationVectors, nPitches,...
                                         validFftIndices, dcIsIncluded)

if L == 1
    a1 = crossCorrelationVectors(2, :);
    a2 = a1;
else
    if dcIsIncluded
        a1 = crossCorrelationVectors(2:L+1, :)+...
             [zeros(1, nPitches);...
              crossCorrelationVectors((1:L-1), :)];
    else
        a1 = crossCorrelationVectors(2:L, :)+...
             [zeros(1,nPitches);...
              crossCorrelationVectors((1:L-2)+2, :)];
    end
    
    a2 = crossCorrelationVectors(2:L, :)-...
         [zeros(1,nPitches);...
          crossCorrelationVectors((1:L-2)+2, :)];
end
   
for l = 1:L 
    maxFftIndex = floor(min(F*pitchBounds(2),F/(2*l)-1));
    nPitches = nPitches-(validFftIndices(end)-maxFftIndex);
    validPitchIndices = 1:nPitches;
    validFftIndices = validFftIndices(validPitchIndices);
	
    if l == 1
        % compute the cost function for a model of one
        if dcIsIncluded
            [psi1, phi1, gammaOld1] = computeGammaSingleSinus(...
                crossCorrelationVectors(1, validPitchIndices), ...
                a1(1, validPitchIndices), true, true);
            Gamma1{1} = gammaOld1;

            [R1, alpha1, gammaNew1] = computeGammaTwoSinus(...
                crossCorrelationVectors(1:3,validPitchIndices), ...
                psi1, gammaOld1, true, true);
            Gamma1{2} = gammaNew1;

        else            
            [psi1, phi1, gammaOld1] = computeGammaSingleSinus(...
                crossCorrelationVectors(1:3,validPitchIndices), ...
                a1(1,validPitchIndices), true, false);
            Gamma1{1} = gammaOld1;
        end
        
        [psi2, phi2, gammaOld2] = computeGammaSingleSinus(...
            crossCorrelationVectors(1:3,validPitchIndices), ...
            a2(1,validPitchIndices), false, dcIsIncluded);
        
        Gamma2{1} = gammaOld2;
	
    elseif l == 2
        % compute the cost function for a model of two
        if dcIsIncluded
            [R1, phi1, psi1, alpha1, gammaOld1, gammaNew1] = ...
                computeGammaMultipleSinus(...
                    R1(1:end-1,validPitchIndices), 3, ...
                    crossCorrelationVectors(1:5,validPitchIndices), ...
                    a1(l,validPitchIndices), ...
                    phi1(:,validPitchIndices), ...
                    psi1(:,validPitchIndices), ...
                    gammaOld1(:,validPitchIndices), ...
                    gammaNew1(:,validPitchIndices), ...
                    alpha1(validPitchIndices), ...
                    true, true);
            Gamma1{3} = gammaNew1;
        else
            [R1, alpha1, gammaNew1] = computeGammaTwoSinus(...
                crossCorrelationVectors(1:5,validPitchIndices), ...
                psi1(validPitchIndices), ...
                gammaOld1(validPitchIndices), true, false);
            
            Gamma1{2} = gammaNew1;
        end
        
        [R2, alpha2, gammaNew2] = computeGammaTwoSinus(...
            crossCorrelationVectors(1:5,validPitchIndices), ...
            psi2(validPitchIndices), ...
            gammaOld2(validPitchIndices), false, false);
	            
        
        Gamma2{2} = gammaNew2;
	
	
    else
        
        if dcIsIncluded
            ll = l;
        else
            ll = l-1;
        end
        
        % compute the cost function for a model of more than two
        [R1, phi1, psi1, alpha1, gammaOld1, gammaNew1] = ...
            computeGammaMultipleSinus(...
                R1(1:end-1, validPitchIndices), ll+1, ...
                crossCorrelationVectors(1:2*l+1, validPitchIndices), ...
                a1(ll, validPitchIndices), ...
                phi1(:, validPitchIndices), ...
                psi1(:, validPitchIndices), ...
                gammaOld1(:, validPitchIndices), ...
                gammaNew1(:, validPitchIndices), ...
                alpha1(validPitchIndices), ...
                true, dcIsIncluded);
        [R2, phi2, psi2, alpha2, gammaOld2, gammaNew2] = ...
            computeGammaMultipleSinus(...
                R2(1:end-1,validPitchIndices), l, ...
                crossCorrelationVectors(1:2*l+1, validPitchIndices), ...
                a2(l-1, validPitchIndices), ...
                phi2(:, validPitchIndices), ...
                psi2(:, validPitchIndices), ...
                gammaOld2(:, validPitchIndices), ...
                gammaNew2(:, validPitchIndices), ...
                alpha2(validPitchIndices), ...
                false, dcIsIncluded);
	
        if dcIsIncluded
            Gamma1{l+1} = gammaNew1;
        else
            Gamma1{l} = gammaNew1;
        end
        Gamma2{l} = gammaNew2;
    end
end

